= Installing and Using the Asciidoctor Java Integration
Alex Soto
:awestruct-layout: base
:toc:
:repo-ref: http://github.com/asciidoctor/asciidoctor-java-integration
:issues-ref: https://github.com/asciidoctor/asciidoctor-java-integration/issues
:discuss-ref: http://discuss.asciidoctor.org
:artifact-version: 0.1.4
:artifact-query-ref: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.asciidoctor%22%20AND%20a%3A%22asciidoctor-java-integration%22%20AND%20v%3A%220.1.4%22
:artifact-detail-ref: http://search.maven.org/#artifactdetails%7Corg.asciidoctor%7Casciidoctor-java-integration%7C0.1.4%7Cjar
:artifact-file-ref: http://search.maven.org/remotecontent?filepath=org/asciidoctor/asciidoctor-java-integration/0.1.4/asciidoctor-java-integration-0.1.4.jar
:jruby-startup-ref: http://github.com/jruby/jruby/wiki/Improving-startup-time
:docs-ref: link:/docs
:maven-guide-ref: link:/docs/install-and-use-asciidoctor-maven-plugin
:gradle-guide-ref: link:/docs/install-and-use-asciidoctor-gradle-plugin
:asciidoc-ref: http://asciidoc.org/README.html
:header-nocaption: options="header", caption=""
:language: java
:font-awesome-url: http://fortawesome.github.io/Font-Awesome/

The {repo-ref}[Asciidoctor Java integration] is the official means of using Asciidoctor to render your {asciidoc-ref}[AsciiDoc] documentation using Java instead of Python or Ruby.



== Distribution

The Asciidoctor Java integration is published to Maven Central.
The artifact information is summarized in the table below.

[cols="2,4,^1,5", {header-nocaption}]
.Artifact information for the Asciidoctor Java integration library
|===
|Group Id |Artifact Id |Version |Download

|org.asciidoctor
|{artifact-query-ref}[asciidoctor-java-integration]
|{artifact-detail-ref}[{artifact-version}]{asterisk}
|{artifact-file-ref}.pom[pom] {artifact-file-ref}.jar[jar] {artifact-file-ref}-javadoc.jar[javadoc (jar)] {artifact-file-ref}-sources.jar[source (jar)]
|===

{asterisk} This release is based on the Asciidoctor {artifact-version} release.

== Installation

Since the Asciidoctor Java integration is a standard +.jar+ file, the only thing you should do is add the library to the classpath.

// SW: Need functional tests for a java maven project and a java gradle project
// SW: Need to field test

[source, xml]
.Dependency declaration in Maven's pom.xml
----
<dependencies>
  <dependency>
    <groupId>org.asciidoctor</groupId>
    <artifactId>asciidoctor-java-integration</artifactId>
    <version>${asciidoctor.version}</version> <1>
  </dependency>
</dependencies>
----

// SW: The JRuby runtime dependency is missing

[source, groovy]
.Dependency declaration in Gradle's build.gradle
----
dependencies {
  compile('org.asciidoctor:asciidoctor-java-integration:${asciidoctor.version}') { <1>
    transitive = false
  }
}
----
<1> As this library tracks the version of Asciidoctor, you can use which ever version of Asciidoctor you prefer.

You can learn more about these plugins in the following two guides:

- {maven-guide-ref}[How to Install and Use the Asciidoctor Maven Plugin]
- {gradle-guide-ref}[How to Install and Use the Asciidoctor Gradle Plugin]

== Usage

The main entry point for the Asciidoctor Java integration is the +Asciidoctor+ Java interface.
This interface provides four methods for rendering AsciiDoc content, +render+, +renderFile+, +renderFiles+ and +renderDirectory+.

[cols="1m,2", {header-nocaption}]
.+Asciidoctor+ methods
|===
|Name |Description

|render
|Parses the AsciiDoc content read from a string or stream and renders it to the specified backend format.

|renderFile
|Parses the AsciiDoc content read from a file and renders it to the specified backend format.

|renderFiles
|Parses a list of AsciiDoc files and renders them to the specified backend format.

|renderDirectory
|Parses all AsciiDoc files present in the specified directory following given strategy and renders them to the specified backend format.

|readDocumentHeader
|Retrieves information from the header of an AsciiDoc document without parsing or rendering the entire document.
|===

NOTE: All methods are overloaded to accomodate various ways to supply content and options.

Additionally, a factory method is provided to create an instance of the +Asciidoctor+ interface.

[source]
.Creating an +Asciidoctor+ instance
----
import static org.asciidoctor.Asciidoctor.Factory.create;
import org.asciidoctor.Asciidoctor;

Asciidoctor asciidoctor = create();
----

Below the code that creates the +Asciidoctor+ interface instance, you can call the +render+ method that best suits your needs.
Use +render+ to render a string.

[source]
.Rendering a string
----
//...
import java.util.Collections;
//...
String rendered = asciidoctor.render(
    "AsciiDoc is *easy*!", Collections.<String,Object>emptyMap());
System.out.println(rendered);
----

+renderFile+ will render the content of an AsciiDoc file.

[source]
.Rendering a file
----
//...
import java.util.Collections;
//...
String rendered = asciidoctor.renderFile(
    new File("sample.adoc"), Collections.<String,Object>emptyMap());
System.out.println(rendered);
----

+renderFiles+ will render a list of AsciiDoc files:

[source]
.Rendering a list of files
----
//...
String[] renderedFiles = asciidoctor.renderFiles(
    Arrays.asList(new File("target/test-classes/rendersample.asciidoc")), new HashMap<String, Object>());

for(String renderedFile : renderedFiles) {
    System.out.println(renderedFile);
}
----

If the rendered content is not written into files, +renderDirectory+ will return an array listing all the documents rendered.

Another method provided by the +Asciidoctor+ interface is +renderDirectory+.
This method renders all of the files with AsciiDoc extensions (+.asc+, +.asciidoc+, +.ad+ or +.adoc+) that are present within a specified folder and following given strategy.

Strategy is set as first parameter of +renderDirectory+ method and must implement +DirectoryWalker+ interface. Currently +Asciidoctor+ provides two implementations:

[cols="1m,2", {header-nocaption}]
.+Asciidoctor+ methods
|===
|Class |Description

|AsciiDocDirectoryWalker
|Renders all files of given folder and all its subfolders.

|GlobDirectoryWalker
|Renders all files of given folder following a +Glob+ expression.
|===

If the rendered content is not written into files, +renderDirectory+ will return an array listing all the documents rendered.

// SW: Maybe provide an example of this array output?

[source]
.Rendering all the files in a directory
----
//...
String[] renderedFiles = asciidoctor.renderDirectory(
    new AsciiDocDirectoryWalker("target/test-classes/src"), new HashMap<String, Object>());

for(String renderedFile : renderedFiles) {
    System.out.println(renderedFile);
}
----

Another way to render AsciiDoc content is by calling the +render+ method and providing a standard Java +java.io.Reader+ and +java.io.Writer+.
The +Reader+ interface is used as the source, and the rendered content is written to the +Writer+ interface.

[source]
.Rendering content read from a +java.io.Reader+ to a +java.io.Writer+
----
//...
FileReader reader = new FileReader(new File("sample.adoc"));
StringWriter writer = new StringWriter();

asciidoctor.render(reader, writer, options().asMap());

StringBuffer rendered = writer.getBuffer();
System.out.println(rendered.toString());
----

+readDocumentHeader+ retrieve information from the header of an AsciiDoc document without parsing or rendering the entire document.
This method returns an instance of +org.asciidoctor.DocumentHeader+ with all information from the header filled.

[source, asciidoc]
.Example AsciiDoc document with header information
----
= Sample Document
Doc Writer <doc.writer@asciidoc.org>; John Smith <john.smith@asciidoc.org>
v1.0, 2013-05-20: First draft
:title: Sample Document
:tags: [document, example]

Preamble...
----

[source]
.Reading header information from the AsciiDoc document
----
//...
DocumentHeader header = asciidoctor.readDocumentHeader(
    new File("target/test-classes/documentheaders.asciidoc"));

System.out.println(header.getDocumentTitle()); <1>

Author author = header.getAuthor(); <2>
System.out.println(author.getEmail()); <3>
System.out.println(author.getFullName()); <4>

RevisionInfo revisionInfo = header.getRevisionInfo();

System.out.println(revisionInfo.getDate()); <5>
System.out.println(revisionInfo.getNumber()); <6>
System.out.println(revisionInfo.getRemark()); <7>
----
<1> prints +Sample Document+
<2> prints +Doc Writer+
<3> prints `doc.writer@asciidoc.org`
<4> prints +Doc Writer+
<5> prints +2013-05-20+
<6> prints +1.0+
<7> prints +First draft+

The +readDocumentHeader+ method can be extremely useful for building an index of documents.

[source]
----
import java.io.File;
import java.util.HashSet;
import java.util.Set;
import org.asciidoctor.Asciidoctor;
import org.asciidoctor.AsciiDocDirectoryWalker;
import org.asciidoctor.DirectoryWalker;
import org.asciidoctor.DocumentHeader;

//...

Asciidoctor asciidoctor = Asciidoctor.Factory.create();
Set<DocumentHeader> documentIndex = new HashSet<DocumentHeader>();
DirectoryWalker directoryWalker = new AsciiDocDirectoryWalker("docs"); <1>
for (File file : directoryWalker.scan()) {
    documentIndex.add(asciidoctor.readDocumentHeader(file));
}
----
<1> renders all files in +docs+ folder and its subfolders. 

=== Options

Asciidoctor supports numerous options, such as:

+in_place+::
  Renders the output to a file adjacent to the input file.

+template_dirs+::
  Specifies a directory of https://github.com/rtomayko/tilt[Tilt]-compatible templates to be used instead of the default built-in templates

+attributes+::
  A Hash (key-value pairs) of attributes to configure various aspects of the AsciiDoc processor

The second parameter of the +render+ method is +java.util.Map+.
The options listed above can be set in +java.util.Map+.

[source]
.Using the +in_place+ option and the +backend+ attribute
----
Map<String, Object> attributes = new HashMap<String, Object>();
attributes.put("backend", "docbook"); <1>

Map<String, Object> options = new HashMap<String, Object>();
options.put("attributes", attributes); <2>
options.put("in_place", true); <3>

String rendered = asciidoctor.renderFile(new File("sample.adoc"), options);
----
<1> Defines the +backend+ attribute as +docbook+ in the attributes map
<2> Registers the attributes map as the +attributes+ option in the options map
<3> Defines the +in_place+ option in the options map

Another way for setting options is by using +org.asciidoctor.Options+ class.
+Options+ is a simple Java class which contains methods for setting required options.
Note that related with +org.asciidoctor.Options+ class, there is +org.asciidoctor.Attributes+ class, which can be used for setting attributes.

+render+ method is overloaded so +org.asciidoctor.Options+ can be passed instead of a +java.util.Map+.

[source]
.Using the +in_place+ option and the +backend+ attribute
----
Attributes attributes = new Attributes();
attributes.setBackend("docbook"); <1>

Options options = new Options();
options.setAttributes(attributes); <2>
options.setInPlace(true); <3>

String rendered = asciidoctor.renderFile(new File("sample.adoc"), options);
----
<1> Defines the +backend+ attribute as +docbook+ in the attributes class
<2> Registers the attributes class as the +attributes+ option in the options class
<3> Defines the +in_place+ option in the options class

The Asciidoctor Java integration also provides two builder classes to create these maps and classes in a more readable form.

+AttributesBuilder+::
  Used to define attributes with a fluent API

+OptionsBuilder+::
  Used to define options with a fluent API

The code below results in the same output as the previous example but uses the builder classes.

[source]
.Setting attributes and options with the builder classes
----
import static org.asciidoctor.AttributesBuilder.attributes;
import static org.asciidoctor.OptionsBuilder.options;

//...
Map<String, Object> attributes = attributes().backend("docbook") <1>
                                             .asMap();

Map<String, Object> options = options().inPlace(true)
                                       .attributes(attributes) <2>
                                       .asMap(); <3>

String rendered = asciidoctor.renderFile(new File("sample.adoc"), options);
----
<1> Defines the +backend+ attribute as +docbook+ using fluent API.
<2> Registers the attributes map as +attributes+.
<3> Converts options to +java.util.Map+ instance.

[source]
.Setting attributes and options with the builder classes
----
import static org.asciidoctor.AttributesBuilder.attributes;
import static org.asciidoctor.OptionsBuilder.options;

//...
Attributes attributes = attributes().backend("docbook").get(); <1>
Options options = options().inPlace(true).attributes(attributes).get(); <2>

String rendered = asciidoctor.renderFile(new File("sample.adoc"), options); <3>
----
<1> Defines and returns an +Attributes+ class instead of +java.util.Map+ by calling +get()+ method instead of +asMap()+.
<2> Defines and returns an +Options+ class instead of +java.util.Map+ by calling +get()+ method instead of +asMap()+.
<3> Renders the document passing +Options+ class.

TIP: All methods used to render content are overloaded with +OptionsBuilder+ parameter, so it is no longer required to call +get+ nor +asMap+ methods.

WARNING: +icons+ attribute requires a +String+ to set the value used to "draw" icons.
At this time, you can use two constants +org.asciidoctor.Attributes.IMAGE_ICONS+ for using the same approach as AsciiDoc, that is using +img+ tags, or org.asciidoctor.Attributes.FONT_ICONS for using icons from http://fortawesome.github.io/Font-Awesome[Font Awesome^].

From Asciidoctor 0.1.3, attributes can be specified as +String+ or +Array+ instead of pair key/value by using +org.asciidoctor.Attributes.setAttributes(String)+ or `org.asciidoctor.Attributes.setAttributes(String...)` and +AttributesBuilder+ methods.

[source]
.Passing attributes as a String
----
//...
Attributes attributes = attributes().attributes("toc numbered").get();
Options options = options().attributes(attributes).get();
----

is equivalent to:

[source]
.Passing individual attributes
----
//...
Attributes attributes = attributes().tableOfContents(true).sectionNumbers(true).get();
Options options = options().attributes(attributes).get();
----

You can also use an Array:

[source]
.Passing attributes as an Array
----
//...
String[] attributesArray = new String[]{"toc", "source-highlighter=coderay"};
Attributes attributes = attributes().attributes(attributesArray).sectionNumbers(true).get();
Options options = options().attributes(attributes).get();
----

is equivalent to:

[source]
.Passing individual attributes
----
//...
Attributes attributes = attributes().tableOfContents(true).sectionNumbers(true).sourceHighlighter("coderay").get();
Options options = options().attributes(attributes).get();
----

=== Utilities

A utility class +AsciiDocDirectoryWalker+ is available for searching the AsciiDoc files present in a root folder and its subfolders.
+AsciiDocDirectoryWalker+ locates all files that end with +.asc+, +.asciidoc+, +.ad+ or +.adoc+.

[source]
.Locating AsciiDoc files with +AsciiDocDirectoryWalker+
----
import java.util.List;
import org.asciidoctor.AsciiDocDirectoryWalker;

DirectoryWalker directoryWalker = new AsciiDocDirectoryWalker("docs"); <1>
List<File> asciidocFiles = directoryWalker.scan(); <2>
----
<1> Defines which parent directory is used for searching.
<2> Returns a list of all AsciiDoc files found in root folder and its subfolders.

A utility class +GlobDirectoryWalker+ is available for searching the AsciiDoc files present in a root folder and scanning using a +Glob+ expression.
+GlobDirectoryWalker+ locates all files that end with +.asc+, +.asciidoc+, +.ad+ or +.adoc+.

[source]
.Locating AsciiDoc files with +GlobDirectoryWalker+
----
import java.util.List;
import org.asciidoctor.GlobDirectoryWalker;

DirectoryWalker directoryWalker = new GlobDirectoryWalker("docs", "**/*.adoc"); <1>
List<File> asciidocFiles = directoryWalker.scan(); <2>
----
<1> Defines which parent directory is used for searching and the glob expression.
<2> Returns a list of all AsciiDoc files matching given +glob+ expression.

=== GEM_PATH

By default +asciidoctor-java-integration+ comes with all required gems bundled within the jar.
But in some circumstances like OSGi environments you may require to store gems in an external folder and be loaded by +asciidoctor-java-integration+.
To accomplish this scenario, +create+ method provides a parameter to set folder where gems are present.
Internally +asciidoctor-java-integration+ will set +GEM_PATH+ environment variable to given path.

[source]
.Example of setting GEM_PATH
----
import static org.asciidoctor.Asciidoctor.Factory.create;
import org.asciidoctor.Asciidoctor;

Asciidoctor asciidoctor = create("/my/gem/path"); <1>
----
<1> Creates +Asciidoctor+ instance with given GEM_PATH location.

=== Extension API

One of the big improvements of +Asciidoctor+ is the extensions API. {repo-ref}[Asciidoctor Java integration] allows us to write extensions in +Java+ language and register them inside +Asciidoctor+, you don't need to write them in +Ruby+.

In +Asciidoctor+ there is 7 kind of extension points, ane each one have an abstract class in +Java+ that represents them.

[cols="1m,2", {header-nocaption}]
.+Asciidoctor+ extensionAPI
|===
|Name |Class

|Preprocessor
|org.asciidoctor.extension.Preprocessor

|Treeprocessor
|org.asciidoctor.extension.Treeprocessor

|Postprocessor
|org.asciidoctor.extension.Postprocessor

|Block processor
|org.asciidoctor.extension.BlockProcessor

|Block macro processor
|org.asciidoctor.extension.BlockMacroProcessor

|Inline macro processor
|org.asciidoctor.extension.InlineMacroProcessor

|Include processor
|org.asciidoctor.extension.IncludeProcessor
|===

To create an extension two things are required, create a class implementing an extension class (this will depend on the kind of interface being developed),
and second one register it using +ExtensionRegistry+ class.

==== Preprocessor

This extension skims off front matter from the top of the document that gets used by site generators like Jekyll and Awestruct.

[source]
.Preprocessor example
----
public class FrontMatterPreprocessorExtension extends Preprocessor { <1>

    public FrontMatterPreprocessorExtension(DocumentRuby documentRuby) { <2>
        super(documentRuby);
    }

    @Override
    public PreprocessorReader process(PreprocessorReader reader,
            List<String> lines) { <3>

        final List<String> frontMatter = new ArrayList<String>();

        List<String> originalLines = new ArrayList<String>(lines);

        if (lines.size() == 0) {
            return reader;
        } else {
            if ("---".equals(lines.get(0).trim())) {
                lines.remove(0);
            }

            Iterator<String> iterator = lines.iterator();

            while (iterator.hasNext()) {
                String line = iterator.next().trim();

                if (!"---".equals(line)) {
                    iterator.remove();
                    frontMatter.add(line);
                } else {
                    break;
                }
            }

            if (lines.size() == 0 || !"---".equals(lines.get(0).trim())) {
                lines.clear();
                lines.addAll(originalLines);
            } else {
                lines.remove(0);
                document.getAttributes().put("front-matter",
                        frontMatter.toString());
            }

            for (int i = 0; i < frontMatter.size() + 2; i++) {
                reader.advance(); <4>
            }

        }

        return reader;
    }

}
----
<1> Class must extends from +Preprocessor+.
<2> A constructor with +DocumentRuby+ must be provided. Instantiation of class is managed by +Asciidoctor+.
<3> +process+ method receives a +PreprocessorReader+ and a list of all lines of current document.
<4> advance the reader by the number of lines taken

[source]
.Register a Preprocessor
----
ExtensionRegistry extensionRegistry = this.asciidoctor.extensionRegistry(); <1>
        
extensionRegistry.preprocessor(FrontMatterPreprocessorExtension.class); <2>

String content = asciidoctor.renderFile(new File(
                "target/test-classes/render-with-front-matter.adoc"),
                new Options()); <3>
----
<1> +ExtensionRegistry+ class is created.
<2> +Preprocessor+ extension is registered.
<3> We can call any +render+ method as usually, no extra parameters are required.

==== Treeprocessor

This extension detects literal blocks that contain terminal commands, strip the prompt character and style the command.

[source]
.Treeprocessor example
----
public class TerminalCommandTreeprocessor extends Treeprocessor { <1>

    public TerminalCommandTreeprocessor(DocumentRuby documentRuby) {
        super(documentRuby);
    }

    @Override
    public void process() {

        final List<Block> blocks = this.document.blocks(); <2>

        for (int i = 0; i < blocks.size(); i++) {
            final Block currentBlock = blocks.get(i);
            List<String> lines = currentBlock.lines(); <3>
            if (lines.size() > 0 && lines.get(0).startsWith("$")) {
                blocks.set(
                        i, convertToTerminalListing(currentBlock));
                        
            }

        }
    }

    public Block convertToTerminalListing(Block block) {

        Map<String, Object> attributes = block.attributes();
        attributes.put("role", "terminal");
        StringBuilder resultLines = new StringBuilder();

        List<String> lines = block.lines();

        for (String line : lines) {
            if (line.startsWith("$")) {
                resultLines.append("<span class=\"command\">")
                        .append(line.substring(2, line.length()))
                        .append("</command");
            } else {
                resultLines.append(line);
            }
        }

        return this.createBlock(document, "listing", resultLines.toString(), attributes,
                new HashMap<String, Object>()); <4>
    }

}
----
<1> Class must extends from +Treeprocessor+.
<2> +document+ instance can be used to retrieve all blocks of current document.
<3> All lines of selected block are retrieved.
<4> To create a new block we must use +createBlock+ method. We must set the parent document, the context (listing), the text content, attributes and options.

[source]
.Register a Treeprocessor
----
ExtensionRegistry extensionRegistry = this.asciidoctor.extensionRegistry(); <1>
        
extensionRegistry.treeprocessor(TerminalCommandTreeprocessor.class); <2>

String content = asciidoctor.renderFile(new File(
                "target/test-classes/sample-with-terminal-command.ad"),
                new Options()); <3>
----
<1> +ExtensionRegistry+ class is created.
<2> +Treeprocessor+ extension is registered.
<3> We can call any +render+ method as usually, no extra parameters are required.

==== Postprocessor

This extension inserts custom footer text.

[source]
.Postprocessor example
----
public class CustomFooterPostProcessor extends Postprocessor { <1>

    public CustomFooterPostProcessor(DocumentRuby documentRuby) {
        super(documentRuby);
    }

    @Override
    public String process(String output) { <2>
        
        String copyright  = "Copyright Acme, Inc.";
        
        if(this.document.basebackend("html")) {
            org.jsoup.nodes.Document doc = Jsoup.parse(output, "UTF-8");

            Element contentElement = doc.getElementById("footer-text");
            contentElement.append(copyright);
            
            output = doc.html();
            
        }

        
        return output; <3>
    }

}
----
<1> Class must extends from +Postprocessor+.
<2> +process+ method receives the document rendered as +String+.
<3> The document content that will be written is returned.

[source]
.Register a Postprocessor
----
ExtensionRegistry extensionRegistry = this.asciidoctor.extensionRegistry(); <1>
        
extensionRegistry.postprocessor(CustomFooterPostProcessor.class); <2>
        
String content = asciidoctor.renderFile(new File(
              "target/test-classes/rendersample.asciidoc"),
              options); <3>
----
<1> +ExtensionRegistry+ class is created.
<2> +Postprocessor+ extension is registered.
<3> We can call any +render+ method as usually, no extra parameters are required.

==== Block processor

This extension registers a custom block style named yell that uppercases all the words.

[source]
.Block processor example
----
public class YellBlock extends BlockProcessor { <1>

    static { <2>
        config.put("contexts", Arrays.asList(":paragraph"));
        config.put("content_model", ":simple");
    }
  
    public YellBlock(String context, DocumentRuby documentRuby) { <3>
        super(context, documentRuby);
    }

    @Override
    public Object process(Block parent, Reader reader, Map<String, Object> attributes) { <4>
        List<String> lines = reader.lines();
        String upperLines = null;
        for (String line : lines) {
            if (upperLines == null) {
                upperLines = line.toUpperCase();
            }
            else {
                upperLines = upperLines + "\n" + line.toUpperCase();
            }
        }
        
        return this.createBlock(document, "paragraph", upperLines, attributes, new HashMap<String, Object>()); <5>
    }

}
----
<1> Class must extends from +BlockProcessor+.
<2> Because of internals of +Blocks+, the configuration of block must be specified within a static +Java+ block.
<3> Constructor of +BlockProcessor+ must receive the context where new block is defined and the document.
<4> +process+ method receives the block definition, a reader, and the attributes defined in block.
<5> To create a new block we must use +createBlock+ method. We must set the parent document, the context (listing), the text content, attributes and options.


[source]
.Register a Block processor
----
ExtensionRegistry extensionRegistry = this.asciidoctor.extensionRegistry(); <1>

extensionRegistry.block("yell", YellBlock.class); <2>

String content = asciidoctor.renderFile(new File(
                "target/test-classes/sample-with-yell-block.ad"),
                new Options()); <3>
----
<1> +ExtensionRegistry+ class is created.
<2> +BlockProcessor+ extension is registered with the context of block.
<3> We can call any +render+ method as usually, no extra parameters are required.

[source]
.Example of Block processor
----
[yell] <1>
The time is now. Get a move on.
----
<1> Note that _yell_ is the context where block lives and is the same as the first parameter of +block+ method of +ExtensionRegistry+ class.

==== Block macro processor

This extension creates a block macro named gist for embedding a gist.

[source]
.Block macro processor example
----
public class GistMacro extends BlockMacroProcessor { <1>

    public GistMacro(String macroName, DocumentRuby documentRuby) { <2>
        super(macroName, documentRuby);
    }
    
    @Override
    public Block process(Document parent, String target,
            Map<String, Object> attributes) { <3>
       
       String content = "<div class=\"content\">\n" + 
       		"<script src=\"https://gist.github.com/"+target+".js\"></script>\n" + 
       		"</div>"; 
       
       Map<String, Object> options = new HashMap<String, Object>() {{
           put("content_model", ":raw");
       }
       };
       
       return this.createBlock(parent, "pass", content, attributes, options); <4>
    }

}
----
<1> Class must extends from +BlockMacroProcessor+.
<2> Constructor must receive the macro name, and the document.
<3> +process+ method receives the parent document, the content of the macro, and attributes defined in macro.
<4> To create a new block we must use +createBlock+ method. We must set the parent document, the context (listing), the text content, attributes and options.

[source]
.Register a Block macro processor
----
ExtensionRegistry extensionRegistry = this.asciidoctor.extensionRegistry(); <1>
        
extensionRegistry.blockMacro("gist", GistMacro.class); <2>
        
String content = asciidoctor.renderFile(new File(
                "target/test-classes/sample-with-gist-macro.ad"),
                new Options()); <3>
----
<1> +ExtensionRegistry+ class is created.
<2> +BlockMacroProcessor+ extension is registered with the name of the macro.
<3> We can call any +render+ method as usually, no extra parameters are required.

[source]
.Example of Block macro processor
----
.My Gist
gist::123456[] <1>
----
<1> Note that _gist_ is the name of the macro and is the same as the first parameter of +blockMacro+ method of +ExtensionRegistry+ class.

==== Inline macro processor

This extension creates an inline macro named man that links to a manpage.

[source]
.Inline macro processor example
----
public class ManpageMacro extends InlineMacroProcessor { <1>

    public ManpageMacro(String macroName, DocumentRuby documentRuby) { <2>
        super(macroName, documentRuby);
    }

    @Override
    protected String process(Document parent, String target,
            Map<String, Object> attributes) { <3>
        
        return "<a href=\"" + target + ".html\">" + target + "</a>"; <4>
    }

}
----
<1> Class must extends from +InlineMacroProcessor+.
<2> Constructor must receive the macro name, and the document.
<3> +process+ method receives the parent document, the content of the macro, and attributes defined in macro.
<4> Because it is an inline macro, only a replacement string must be returned.

[source]
.Register an Inline macro processor
----
ExtensionRegistry extensionRegistry = this.asciidoctor.extensionRegistry(); <1>
        
extensionRegistry.inlineMacro("man", ManpageMacro.class); <2>
        
String content = asciidoctor.renderFile(new File(
                "target/test-classes/sample-with-man-link.ad"),
                new Options()); <3>
----
<1> +ExtensionRegistry+ class is created.
<2> +InlineMacroProcessor+ extension is registered with the name of the macro.
<3> We can call any +render+ method as usually, no extra parameters are required.

[source]
.Example of Inline macro processor
----
See man:gittutorial[7] to get started.
----
<1> Note that _man_ is the name of the macro and is the same as the first parameter of +inlineMacro+ method of +ExtensionRegistry+ class.

==== Include processor

Include a file from a URI.

[source]
.Include processor example
----
public class UriIncludeProcessor extends IncludeProcessor { <1>

    public UriIncludeProcessor(DocumentRuby documentRuby) {
        super(documentRuby);
    }

    @Override
    public boolean handles(String target) { <2>
        return target.startsWith("http://") || target.startsWith("https://");
    }

    @Override
    public void process(PreprocessorReader reader, String target,
            Map<String, Object> attributes) { 

        StringBuilder content = readContent(target);
        reader.push_include(content.toString(), target, target, 1, attributes); <3>

    }

    private StringBuilder readContent(String target) {
        StringBuilder content = new StringBuilder();

        try {

            URL url = new URL(target);
            InputStream openStream = url.openStream();

            BufferedReader bufferedReader = new BufferedReader(
                    new InputStreamReader(openStream));

            String line = null;
            while ((line = bufferedReader.readLine()) != null) {
                content.append(line);
            }

            bufferedReader.close();

        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        } catch (IOException e) {
            throw new IllegalArgumentException(e);
        }
        return content;
    }

}
----
<1> Class must extends from +IncludeProcessor+.
<2> +handles+ method is used by processor to decide if included element should be rendered by this processor or not. +target+ attribute is the value of +include+ macro.
<3> +push_include+ method inserts new content (retrieved from the url) in current position of document.

[source]
.Register an Inline macro processor
----
ExtensionRegistry extensionRegistry = this.asciidoctor.extensionRegistry(); <1>
        
extensionRegistry.includeProcessor(UriIncludeProcessor.class); <2>

String content = asciidoctor.renderFile(new File(
                "target/test-classes/sample-with-uri-include.ad"),
                new Options()); <3>
----
<1> +ExtensionRegistry+ class is created.
<2> +IncludeProcessor+ extension is registered.
<3> We can call any +render+ method as usually, no extra parameters are required.

[source]
.Example of include processor
----
= Example of URI

.Gemfile
[source,ruby]
----
include::https://raw.github.com/asciidoctor/asciidoctor/master/Gemfile[]
----
----

== Optimization

Sometimes JRuby starts slower than expected versus standard C-based, non-optimizing Ruby.
To improve this start time, JRuby offers flags that can be used to tune JRuby applications.
Several Java flags can also be used in conjunction with or apart from the JRuby flags, in order to improve the start time even more.

// SW: Need examples of JRuby and Java flags being used

For small tasks such as converting an AsciiDoc document, two JRuby flags can improve the start time:

[cols="1m,2", width="50%", {header-nocaption}]
.JRuby flags
|===
|Name |Value

|jruby.compat.version
|RUBY1_9

|jruby.compile.mode
|OFF
|===

Both flags are set by default inside the Asciidoctor Java integration project.

The Java flags available for improving start time depend on whether your working on a 32 or 64 bit processor and your JDK version.
These flags are set by using the +JRUBY_OPTS+ environment variable.
Let's see a summary of these flags and in which environments they can be used.

[cols="1m,2", width="75%", {header-nocaption}]
.Java flags
|===
|Name |JDK

|-client
|32 bits Java

|-Xverify:none
|32/64 bits Java

|-XX:+TieredCompilation
|32/64 bits Java SE 7

|-XX:TieredStopAtLevel=1
|32/64 bits Java SE 7
|===

[source, shell]
.Setting flags for Java SE 6
----
export JRUBY_OPTS="-J-Xverify:none -J-client" <1>
----
<1> Note that you should add +-J+ before the flag.

You can find a full explanation on how to improve the start time of JRuby applications at {jruby-startup-ref}[Improving Startup Time].

== Resources

The Asciidoctor Java integration's source code, including its latest developments and issues, can be found in the project's {repo-ref}[repository].
If you identify an issue while using the Asciidoctor Java integration, please don't hesitate to {issues-ref}[file a bug report].
Also, don't forget to join the {discuss-ref}[Asciidoctor discussion list], where you can ask questions and leave comments.
